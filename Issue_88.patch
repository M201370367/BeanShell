Index: src/bsh/Capabilities.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-15
===================================================================
--- src/bsh/Capabilities.java	(revision 125)
+++ src/bsh/Capabilities.java	(revision )
@@ -33,6 +33,7 @@
 
 package bsh;
 
+import java.lang.reflect.Field;
 import java.util.Hashtable;
 
 /**
@@ -80,6 +81,13 @@
 			// test basic access
 			try {
 				String.class.getDeclaredMethods();
+				try {
+					final Field field = Capabilities.class.getField("classes");
+					field.setAccessible(true);
+					field.setAccessible(false);
+				} catch (NoSuchFieldException e) {
+					// ignore
+				}
 			} catch ( SecurityException e ) {
 				throw new Unavailable("Accessibility unavailable: "+e);
 			}
Index: src/bsh/LHS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-15
===================================================================
--- src/bsh/LHS.java	(revision 125)
+++ src/bsh/LHS.java	(revision )
@@ -205,7 +205,7 @@
 					((Primitive)val).getValue() : val;
 
 				// This should probably be in Reflect.java
-				field.setAccessible(true);
+				Reflect.setAccessible(field);
 				field.set( object, fieldVal );
 				return val;
 			}
Index: src/bsh/Reflect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-15
===================================================================
--- src/bsh/Reflect.java	(revision 125)
+++ src/bsh/Reflect.java	(revision )
@@ -37,6 +37,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Member;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.List;
@@ -332,31 +333,28 @@
 		 */
 	private static Field findAccessibleField(Class clas, String fieldName) throws UtilEvalError, NoSuchFieldException {
 		Field field;
-
 		// Quick check catches public fields include those in interfaces
 		try {
 			field = clas.getField(fieldName);
-			field.setAccessible(true);
 			return field;
 		} catch (NoSuchFieldException e) {
-			// fallthrough
+			// ignore
 		}
-
-		// Now, on with the hunt...
+		if (Capabilities.haveAccessibility()) {
+			// try hidden fields (protected, private, package protected)
-		while (clas != null) {
-			try {
-				field = clas.getDeclaredField(fieldName);
-				field.setAccessible(true);
-				return field;
+			while (clas != null) {
+				try {
+					field = clas.getDeclaredField(fieldName);
+					field.setAccessible(true);
+					return field;
-
-				// Not found, fall through to next class
-
+				} catch (SecurityException e) {
+					break;
-			} catch (NoSuchFieldException e) {
+				} catch (NoSuchFieldException e) {
-				// fallthrough
+					// Not found, fall through to next class
-			}
+				}
-
-			clas = clas.getSuperclass();
-		}
+				clas = clas.getSuperclass();
+			}
+		}
 		throw new NoSuchFieldException(fieldName);
 	}
 
@@ -435,9 +433,15 @@
 			// This is the first time we've seen this method, set accessibility
 			// Note: even if it's a public method, we may have found it in a
 			// non-public class
-			if (method != null && (!publicOnly || isPublic(method))) {
+			if (method != null) {
+				if (!publicOnly || (isPublic(method) && !isPublic(method.getDeclaringClass()))) {
+					try {
-				method.setAccessible(true);
+						method.setAccessible(true);
+					} catch (SecurityException e) {
+						method = null;
-			}
+					}
+				}
+			}
 
 			// If succeeded cache the resolved method.
 			if (method != null && bcm != null) {
@@ -565,7 +569,7 @@
 			throw cantFindConstructor(clas, types);
 		}
 
-		if (!isPublic(con)) {
+		if (!isPublic(con) && Capabilities.haveAccessibility()) {
 			con.setAccessible(true);
 		}
 
@@ -882,23 +886,26 @@
 	}
 
 
-	private static boolean isPublic(Class c) {
-		return Modifier.isPublic(c.getModifiers());
+	private static boolean isPublic(Member member) {
+		return Modifier.isPublic(member.getModifiers());
 	}
 
 
-	private static boolean isPublic(Method m) {
-		return Modifier.isPublic(m.getModifiers());
+	private static boolean isPublic(Class clazz) {
+		return Modifier.isPublic(clazz.getModifiers());
 	}
 
 
-	private static boolean isPublic(Constructor c) {
-		return Modifier.isPublic(c.getModifiers());
+	private static boolean isStatic(Method m) {
+		return Modifier.isStatic(m.getModifiers());
 	}
 
 
-	private static boolean isStatic(Method m) {
-		return Modifier.isStatic(m.getModifiers());
+	static void setAccessible(final Field field) {
+		if ( ! isPublic(field) && Capabilities.haveAccessibility()) {
+			field.setAccessible(true);
-	}
+		}
+	}
+
 }
 
